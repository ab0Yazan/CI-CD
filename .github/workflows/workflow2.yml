name: app pipeline ci-cd

on:
    push:
        branches: ["main"]

env:
    API_IMAGE: yazona/first-api:${{ github.sha }}
    SCHEDULER_IMAGE: yazona/first-scheduler:${{ github.sha }}
    WORKER_IMAGE: yazona/first-worker:${{ github.sha }}
    NGINX_IMAGE: yazona/first-nginx:${{ github.sha }}
    PROXY_IMAGE: yazona/first-proxy:${{ github.sha }}
    MYSQL_IMAGE: yazona/first-mysql:${{ github.sha }}
    FRONTEND_IMAGE: yazona/first-frontend:${{ github.sha }}
    DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
    build-backend-images:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: build & push api
              run: |
                docker build -t $API_IMAGE --build-arg user=laravel --build-arg uid=1000 -f ./api/Dockerfile .
                docker push $API_IMAGE

            - name: build & push scheduler
              run: |
                docker build -t $SCHEDULER_IMAGE --target=scheduler --build-arg user=laravel --build-arg uid=1000 -f ./api/Dockerfile .
                docker push $SCHEDULER_IMAGE

            - name: build & push worker
              run: |
                  docker build -t $WORKER_IMAGE --target=worker --build-arg user=laravel --build-arg uid=1000 -f ./api/Dockerfile .
                  docker push $WORKER_IMAGE

    build-mysql-image:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: docker/login-action@v2
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: build mysql
              run: docker build -t $MYSQL_IMAGE -f ./Dockerfile.mysql .
            - name: push mysql
              run: docker push $MYSQL_IMAGE

    analyze:
        needs: [build-backend-images, build-mysql-image]
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v3
          - uses: docker/login-action@v2
            with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

          - name: pull api image
            run: docker pull $API_IMAGE
          - name: pull mysql image
            run: docker pull $MYSQL_IMAGE
          - name: copy .env
            run: echo "${{ secrets.LARAVEL_ENV_TESTING }}" > ./api/.env
          - name: run phpstan
            run: docker run --rm -t $API_IMAGE ./vendor/bin/phpstan analyze --memory-limit=1G
          - name: run phpinsight
            run: docker run --rm -t $API_IMAGE php artisan insights --no-interaction --min-quality=90 --min-complexity=90 --min-architecture=90 --min-style=90 --ansi --format=github-action
    test:
        needs: [build-backend-images, build-mysql-image]
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v3
          - uses: docker/login-action@v2
            with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}
          - name: pull api image
            run: docker pull $API_IMAGE
          - name: pull mysql image
            run: docker pull $MYSQL_IMAGE
          - name: copy .env
            run: echo "${{ secrets.LARAVEL_ENV_TESTING }}" > ./api/.env
          - name: run integration test
            run: docker run --rm -t $API_IMAGE php artisan test


    remove-images:
        needs: ["analyze", "test"]
        runs-on: ubuntu-latest
        if: ${{ always() && contains(needs.*.result , 'failure') }}
        steps:
          - uses: actions/checkout@v3
          - name: remove images
            run: |
                ./deployment/scripts/rm-image.sh yazona/first-api ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_TOKEN }}
                ./deployment/scripts/rm-image.sh yazona/first-mysql ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_TOKEN }}
                ./deployment/scripts/rm-image.sh yazona/first-worker ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_TOKEN }}
                ./deployment/scripts/rm-image.sh yazona/first-scheduler ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_TOKEN }}
    build-nginx:
        needs: test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: docker/login-action@v2
              with:
                 username: ${{ secrets.DOCKERHUB_USERNAME }}
                 password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: build & push nginx
              run: |
                docker build -t $NGINX_IMAGE -f ./api/Dockerfile.nginx .
                docker push $NGINX_IMAGE

    build-frontend:
        needs: test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: docker/login-action@v2
              with:
                 username: ${{ secrets.DOCKERHUB_USERNAME }}
                 password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: build & push frontend
              run: |
                docker build -t $FRONTEND_IMAGE --target=prod -f ./frontend/Dockerfile .
                docker push $FRONTEND_IMAGE
                
    build-proxy:
        needs: test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: docker/login-action@v2
              with:
                 username: ${{ secrets.DOCKERHUB_USERNAME }}
                 password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: build & push proxy
              run: |
                docker build -t $PROXY_IMAGE -f ./Dockerfile.proxy .
                docker push $PROXY_IMAGE
